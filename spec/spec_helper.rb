require 'fileutils'
require 'paint'
Paint.mode = 0 # no coloring for test output

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # RSpec 4 Defaults, working in RSpec 3
  config.tap do |c|
    # rspec-expectations config goes here. You can use an alternate
    # assertion/expectation library such as wrong or the stdlib/minitest
    # assertions if you prefer.
    c.expect_with :rspec do |expectations|
      # This option makes the `description` and `failure_message` of custom
      # matchers include text for helper methods defined using `chain`,
      # e.g.:
      #     be_bigger_than(2).and_smaller_than(4).description
      #     # => "be bigger than 2 and smaller than 4"
      # ...rather than:
      #     # => "be bigger than 2"
      expectations.include_chain_clauses_in_custom_matcher_descriptions = true
    end

    # rspec-mocks config goes here. You can use an alternate test double
    # library (such as bogus or mocha) by changing the `mock_with` option here.
    c.mock_with :rspec do |mocks|
      # Prevents you from mocking or stubbing a method that does not exist on
      # a real object.
      mocks.verify_partial_doubles = true
    end

    # This option causes shared context metadata to be inherited by the
    # metadata hash of host groups and examples, rather than triggering
    # implicit auto-inclusion in groups with matching metadata.
    c.shared_context_metadata_behavior = :apply_to_host_groups
  end

  # This sets a default to only running examples tagged wth `:focus`. If
  # no examples like that exist, then it runs all examples.
  #
  # This allows for quick retesting without needing to know the line number,
  # file, or other addressing strategies.
  #
  # Also provides the following aliases:
  #
  # - `fit 'Derp'` -> `it 'Derp', focus: true`
  # - `fdescribe 'Derp'` -> `describe 'Derp', focust: true`
  # - `fcontext 'Derp'` -> `context 'Derp', focus: true`
  #
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = 'spec/examples.txt'

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  config.default_formatter = if config.files_to_run.one?
                               'doc'
                             else
                               'progress'
                             end

  # Print the 2 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  # config.profile_examples = 2

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # Define an environment variable, (e.g., `export FAIL_FAST=3`)
  # Quits tests after N failed tests, defined by the `FAIL_FAST` value
  #
  # config.fail_fast = ENV.fetch('FAIL_FAST', 0).to_i if ENV.fetch('FAIL_FAST', 0).to_i > 0
end

# =============================
# | CUSTOM SETTINGS FOR TESTS |
# =============================

module ExampleRakefiles
  class << self
    def mono_repo
      <<-EOF
      require '#{File.expand_path('../', File.dirname(__FILE__))}/lib/rordan_gramsay/chef_tasks/master_repo'
      EOF
    end

    def cookbook_repo
      <<-EOF
      require '#{File.expand_path('../', File.dirname(__FILE__))}/lib/rordan_gramsay/chef_tasks/test'

      task default: ['lint']
      # Further rake tasks go here
      EOF
    end
  end
end

# Scaffold out a monolithic chef repo in the given directory name
def setup_monorepo!(directory_name)
  FileUtils.mkdir_p(directory_name)
  FileUtils.cd(directory_name) do
    File.write('Rakefile', ExampleRakefiles.mono_repo)
    FileUtils.mkdir_p('cookbooks')
  end
end

# For some reason running `chef generate cookbook [name]` bombs out
# from rspec, so we dummy it out here instead
def setup_cookbook!(cookbook)
  FileUtils.mkdir_p(cookbook)
  FileUtils.cd(cookbook) do
    FileUtils.mkdir_p 'recipes'
    FileUtils.mkdir_p 'test'
    FileUtils.mkdir_p 'attributes'
    FileUtils.mkdir_p 'libraries'

    File.write('.kitchen.yml', "---\n")
    File.write('Rakefile', ExampleRakefiles.cookbook_repo)
    File.write('Berksfile', '')
    File.write('metadata.rb', '')
    File.write('recipes/default.rb', '')
    File.write('attributes/default.rb', '')
  end
end

def with_monorepo(directory_name, &block)
  raise 'No block given' unless block_given?
  FileUtils.cd(directory_name, &block)
end

def with_cookbook(cookbook_name, &block)
  raise 'No block given' unless block_given?
  FileUtils.cd("cookbooks/#{cookbook_name}", &block)
end

def teardown_monorepo!(directory_name)
  FileUtils.rm_r(directory_name, force: true)
end

def run_command(command)
  require 'pty'
  out, = PTY.spawn(command)
  Paint.unpaint(out.read)
end

# USAGE:
#
#   out = capture_stdout { puts 'foo' }
#   out == 'foo'
#   # => true
#
def capture_stdout(&_block)
  original_stdout = $stdout
  $stdout = fake = StringIO.new
  begin
    yield
  ensure
    $stdout = original_stdout
  end
  fake.string
end

def capture_stderr(&_block)
  original_stderr = $stderr
  $stderr = fake = StringIO.new
  begin
    yield
  ensure
    $stderr = original_stderr
  end
  fake.string
end

def capture_stdout_and_stderr(&_block)
  original_stdout = $stdout
  original_stderr = $stderr
  $stdout = out = StringIO.new
  $stderr = err = StringIO.new

  begin
    yield
  ensure
    $stdout = original_stdout
    $stderr = original_stderr
  end

  [out.string, err.string]
end
